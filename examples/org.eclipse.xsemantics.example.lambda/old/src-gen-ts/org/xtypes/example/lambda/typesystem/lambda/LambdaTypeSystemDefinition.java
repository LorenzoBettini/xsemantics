/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

package org.eclipse.xsemantics.example.lambda.typesystem.lambda;

import org.eclipse.xsemantics.example.lambda.typesystem.lambda.rules.*;

import it.xtypes.runtime.RuleFailedException;
import it.xtypes.runtime.RuntimeRule;
import it.xtypes.runtime.RuntimeRules;
import it.xtypes.runtime.RuntimeTypeSystem;
import it.xtypes.runtime.TypeSystemResult;
import it.xtypes.runtime.TypeSystemResultPair;
import it.xtypes.runtime.TypingJudgmentEnvironment;

import org.eclipse.xsemantics.example.lambda.lambda.LambdaPackage;

/**
 * Automatically generated by XTypeS, http://xtypes.sourceforge.net
 * Do not modify it.
 * This class should be instantiated with Google Guide injector.
 */
public class LambdaTypeSystemDefinition extends RuntimeTypeSystem {

	protected LambdaPackage basicPackage = LambdaPackage.eINSTANCE;

	public LambdaTypeSystemDefinition() {
		RuntimeRules rules = new RuntimeRules();
		rules.add(new NotOccurTypeTypeRule());
		rules.add(new NotOccurVarTypeRule());
		rules.add(new NotOccurVarInArrowTypeRule());
		rules.add(new UnifyTypeTypeRule());
		rules.add(new ExtendVariableMappingTypeRule());
		rules.add(new UnifyVarTypeRule());
		rules.add(new UnifyIntTypeTypeRule());
		rules.add(new UnifyStringTypeTypeRule());
		rules.add(new UnifyVariableBasicTypeTypeRule());
		rules.add(new UnifyBasicTypeVariableTypeRule());
		rules.add(new UnifyVariableArrowTypeRule());
		rules.add(new UnifyArrowVariableTypeRule());
		rules.add(new UnifyArrowTypeRule());
		rules.add(new SubstituteTypeTypeRule());
		rules.add(new SubstituteTypeVariableTypeRule());
		rules.add(new SubstituteArrowTypeTypeRule());
		rules.add(new TParamTypeRule());
		rules.add(new TTermTypeRule());
		rules.add(new TIntConstantTypeRule());
		rules.add(new TStringConstantTypeRule());
		rules.add(new TArithmeticsTypeRule());
		rules.add(new TAbstractionTypeRule());
		rules.add(new TVariableTypeRule());
		rules.add(new TApplicationTypeRule());
		rules.add(new TProgramOkTypeRule());
		setRules(rules);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return unifyAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable> unifyAsTypeVariable(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getTypeVariable()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable> unifyAsTypeVariable(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return unifyAsTypeVariable(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.TypeVariable> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getTypeVariable()), left,
				right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.TypeVariable> unify(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getTypeVariable()), left,
				right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.IntType> unifyAsIntType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntType object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getIntType()),
				createEClassifierType(basicPackage.getIntType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.IntType> unifyAsIntType(
			org.eclipse.xsemantics.example.lambda.lambda.IntType object) {
		return unifyAsIntType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.IntType, org.eclipse.xsemantics.example.lambda.lambda.IntType> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntType left,
			org.eclipse.xsemantics.example.lambda.lambda.IntType right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getIntType()),
				createEClassifierType(basicPackage.getIntType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.IntType, org.eclipse.xsemantics.example.lambda.lambda.IntType> unify(
			org.eclipse.xsemantics.example.lambda.lambda.IntType left,
			org.eclipse.xsemantics.example.lambda.lambda.IntType right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntType left,
			org.eclipse.xsemantics.example.lambda.lambda.IntType right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getIntType()),
				createEClassifierType(basicPackage.getIntType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.IntType left,
			org.eclipse.xsemantics.example.lambda.lambda.IntType right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.StringType> unifyAsStringType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringType object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getStringType()),
				createEClassifierType(basicPackage.getStringType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.StringType> unifyAsStringType(
			org.eclipse.xsemantics.example.lambda.lambda.StringType object) {
		return unifyAsStringType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.StringType, org.eclipse.xsemantics.example.lambda.lambda.StringType> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringType left,
			org.eclipse.xsemantics.example.lambda.lambda.StringType right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getStringType()),
				createEClassifierType(basicPackage.getStringType()), left,
				right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.StringType, org.eclipse.xsemantics.example.lambda.lambda.StringType> unify(
			org.eclipse.xsemantics.example.lambda.lambda.StringType left,
			org.eclipse.xsemantics.example.lambda.lambda.StringType right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringType left,
			org.eclipse.xsemantics.example.lambda.lambda.StringType right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getStringType()),
				createEClassifierType(basicPackage.getStringType()), left,
				right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.StringType left,
			org.eclipse.xsemantics.example.lambda.lambda.StringType right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.BasicType> unifyAsBasicType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getBasicType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.BasicType> unifyAsBasicType(
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return unifyAsBasicType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.BasicType> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getBasicType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.BasicType> unify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getBasicType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getBasicType()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			org.eclipse.xsemantics.example.lambda.lambda.BasicType object) {
		return unifyAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.BasicType, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getBasicType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.BasicType, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			org.eclipse.xsemantics.example.lambda.lambda.BasicType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.BasicType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getBasicType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.BasicType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unifyAsArrowType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getArrowType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unifyAsArrowType(
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return unifyAsArrowType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getArrowType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getArrowType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> unifyAsType(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return unifyAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.Type> unify(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkUnify(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unifyAsArrowType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getArrowType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unifyAsArrowType(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return unifyAsArrowType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return tryToApplyPair(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getArrowType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.ArrowType> unify(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return unify(null, left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return tryToApply(environment, "|-", "==",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getArrowType()), left, right);
	}

	public TypeSystemResult<Boolean> checkUnify(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return checkUnify(null, left, right);
	}

	public RuntimeRule applyUnifyRule(TypingJudgmentEnvironment environment,
			Object left, Object right) throws RuleFailedException {
		return applyRule(environment, "|-", "==", left, right);
	}

	public RuntimeRule applyUnifyRule(Object left, Object right)
			throws RuleFailedException {
		return applyUnifyRule(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Type object) {
		return substitutionAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==>",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Type, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return substitution(null, left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkSubstitution(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return substitutionAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return substitution(null, left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkSubstitution(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> substitutionAsType(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType object) {
		return substitutionAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "==>",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.ArrowType, org.eclipse.xsemantics.example.lambda.lambda.Type> substitution(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return substitution(null, left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "==>",
				createEClassifierType(basicPackage.getArrowType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkSubstitution(
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkSubstitution(null, left, right);
	}

	public RuntimeRule applySubstitutionRule(
			TypingJudgmentEnvironment environment, Object left, Object right)
			throws RuleFailedException {
		return applyRule(environment, "|-", "==>", left, right);
	}

	public RuntimeRule applySubstitutionRule(Object left, Object right)
			throws RuleFailedException {
		return applySubstitutionRule(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> mappingAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return tryToApply(environment, "|-", "~>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> mappingAsType(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable object) {
		return mappingAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.Type> mapping(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", "~>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.TypeVariable, org.eclipse.xsemantics.example.lambda.lambda.Type> mapping(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return mapping(null, left, right);
	}

	public TypeSystemResult<Boolean> checkMapping(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "~>",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkMapping(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkMapping(null, left, right);
	}

	public RuntimeRule applyMappingRule(TypingJudgmentEnvironment environment,
			Object left, Object right) throws RuleFailedException {
		return applyRule(environment, "|-", "~>", left, right);
	}

	public RuntimeRule applyMappingRule(Object left, Object right)
			throws RuleFailedException {
		return applyMappingRule(null, left, right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", "!-",
				createEClassifierType(basicPackage.getType()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			org.eclipse.xsemantics.example.lambda.lambda.Type left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkNotoccur(null, left, right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return tryToApply(environment, "|-", "!-",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getTypeVariable()), left,
				right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable right) {
		return checkNotoccur(null, left, right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return tryToApply(environment, "|-", "!-",
				createEClassifierType(basicPackage.getTypeVariable()),
				createEClassifierType(basicPackage.getArrowType()), left, right);
	}

	public TypeSystemResult<Boolean> checkNotoccur(
			org.eclipse.xsemantics.example.lambda.lambda.TypeVariable left,
			org.eclipse.xsemantics.example.lambda.lambda.ArrowType right) {
		return checkNotoccur(null, left, right);
	}

	public RuntimeRule applyNotoccurRule(TypingJudgmentEnvironment environment,
			Object left, Object right) throws RuleFailedException {
		return applyRule(environment, "|-", "!-", left, right);
	}

	public RuntimeRule applyNotoccurRule(Object left, Object right)
			throws RuleFailedException {
		return applyNotoccurRule(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Parameter object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getParameter()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Parameter object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Parameter, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Parameter left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getParameter()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Parameter, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Parameter left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Parameter left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getParameter()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Parameter left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Term object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getTerm()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Term object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Term, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Term left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getTerm()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Term, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Term left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Term left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getTerm()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Term left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.IntConstant, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.IntConstant, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getIntConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.IntConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.StringConstant, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.StringConstant, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getStringConstant()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.StringConstant left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmetics()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Arithmetics, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmetics()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Arithmetics, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getArithmetics()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Arithmetics left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getAbstraction()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Abstraction, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getAbstraction()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Abstraction, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getAbstraction()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Abstraction left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Variable object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariable()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Variable object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Variable, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Variable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Variable, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Variable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Variable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getVariable()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Variable left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Application object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getApplication()),
				createEClassifierType(basicPackage.getType()), object);
	}

	public TypeSystemResult<org.eclipse.xsemantics.example.lambda.lambda.Type> typeAsType(
			org.eclipse.xsemantics.example.lambda.lambda.Application object) {
		return typeAsType(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Application, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Application left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getApplication()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Application, org.eclipse.xsemantics.example.lambda.lambda.Type> type(
			org.eclipse.xsemantics.example.lambda.lambda.Application left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Application left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getApplication()),
				createEClassifierType(basicPackage.getType()), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Application left,
			org.eclipse.xsemantics.example.lambda.lambda.Type right) {
		return checkType(null, left, right);
	}

	public TypeSystemResult<String> typeAsString(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Program object) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getProgram()),
				createBasicType("String"), object);
	}

	public TypeSystemResult<String> typeAsString(
			org.eclipse.xsemantics.example.lambda.lambda.Program object) {
		return typeAsString(null, object);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Program, String> type(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Program left, String right) {
		return tryToApplyPair(environment, "|-", ":",
				createEClassifierType(basicPackage.getProgram()),
				createBasicType("String"), left, right);
	}

	public TypeSystemResultPair<org.eclipse.xsemantics.example.lambda.lambda.Program, String> type(
			org.eclipse.xsemantics.example.lambda.lambda.Program left, String right) {
		return type(null, left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			TypingJudgmentEnvironment environment,
			org.eclipse.xsemantics.example.lambda.lambda.Program left, String right) {
		return tryToApply(environment, "|-", ":",
				createEClassifierType(basicPackage.getProgram()),
				createBasicType("String"), left, right);
	}

	public TypeSystemResult<Boolean> checkType(
			org.eclipse.xsemantics.example.lambda.lambda.Program left, String right) {
		return checkType(null, left, right);
	}

	public RuntimeRule applyTypeRule(TypingJudgmentEnvironment environment,
			Object left, Object right) throws RuleFailedException {
		return applyRule(environment, "|-", ":", left, right);
	}

	public RuntimeRule applyTypeRule(Object left, Object right)
			throws RuleFailedException {
		return applyTypeRule(null, left, right);
	}

}
