/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

/*
 * A version of the FJ system where type computation and
 * checking are separated.
 */
system org.eclipse.xsemantics.example.fj.typing.FjSepTypeSystem

import org.eclipse.xsemantics.example.fj.fj.*
import org.eclipse.xsemantics.example.fj.util.*
import org.eclipse.xsemantics.example.fj.lookup.*

import org.eclipse.emf.ecore.EObject

import org.eclipse.xtext.EcoreUtil2

import org.eclipse.xtext.xbase.lib.CollectionLiterals

import com.google.common.collect.Lists

import java.util.*

inject FjAuxiliaryFunctions fjAux

judgments {
	type |- Expression expression : output Type
		error "cannot type " + stringRep(expression)
		source expression
	classtype |~ Expression expression : output ClassType
		error stringRep(expression) + " has not a class type"
		source expression
	subtype |- Type left <: Type right
		error stringRep(left) + " is not a subtype of " + stringRep(right)
	assignable |- Expression expression |> Type right
		error stringRep(expression) + " is not assignable for " + stringRep(right)
		source expression
	equalstype |- Type left ~~ Type right
		error stringRep(left) + " is not the same type as " + stringRep(right)
	overrides ||- Method current ~~ Method previous
		error current.name + " does not override the superclass method"
		source current
	subtypesequence |- Expression owner ~> List<Expression> expressions << List<? extends TypedElement> elements
		error "invalid arguments for expected parameters"
		source owner
	check |- EObject obj
}

axiom TThis
	G |- This _this : env(G, 'this', ClassType)

axiom TNew
	G |- New newExp : newExp.type

axiom TParamRef 
	G |- ParamRef paramref : paramref.parameter.type

// you can manually create the BasicType with EMF FjFactory...
axiom TStringConstant
	G |- StringConstant s : { 
			val result = FjFactory::eINSTANCE.createBasicType();
			result.basic = 'String'
			result
		}

// ...or use static utility methods...
axiom TIntConstant
	G |- IntConstant i : FjTypeUtils::createIntType

// ...or closures
axiom TBoolConstant
	G |- BoolConstant b : 
	[ 
		it.basic='boolean'
		it
	].apply(FjFactory::eINSTANCE.createBasicType())

axiom TSelection
	G |- Selection selection : selection.message.type

axiom TCast
	G |- Cast cast : cast.type

rule TExpressionClassType
	G |~ Expression expression : ClassType classType
from {
	G |- expression : classType
}

rule GeneralSubtyping
	G |- Type left <: Type right
		error "types " + stringRep(left) + " and " + stringRep(right) +
			" are not comparable"
from {
	// if we get here we're trying to mix
	// a BasicType with a ClassType, thus, we fail
	fail
}

rule BasicSubtyping
	derives G |- BasicType left <: BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassSubtyping
	derives G |- ClassType left <: ClassType right
from {
	left.classref == right.classref
	or
	right.classref.name == "Object"
	or {
		getAll(left.classref, 
			FjPackage::eINSTANCE.class_Superclass,
			FjPackage::eINSTANCE.class_Superclass,
			typeof(Class))
		.contains(right.classref)
	}
}

rule ExpressionAssignableToType
	G |- Expression expression |> Type right
from {
	var Type expressionType
	G |- expression : expressionType
	G |- expressionType <: right
}

rule GeneralEquals
	G |- Type left ~~ Type right
		error "types " + stringRep(left) + " and " + stringRep(right) +
			" are not comparable"
from {
	// if we get here we're trying to mix
	// a BasicType with a ClassType, thus, we fail
	fail
}

rule BasicEquals
	derives G |- BasicType left ~~ BasicType right
from {
	left.basic.equals(right.basic)
}

rule ClassEquals
	derives G |- ClassType left ~~ ClassType right
from {
	left.classref == right.classref
}

rule SubtypeSequence derives
	G |- Expression owner ~> List<Expression> expressions << List<TypedElement> typedElements
from {
	expressions.size == typedElements.size
	or
	fail
		error "expected " + typedElements.size + " arguments, but got " +
			expressions.size
		source owner 

	val typedElementsIterator = typedElements.iterator
	for (exp : expressions) {
		G |- exp |> typedElementsIterator.next.type
	}
}

// a Constant is always OK
axiom CheckConstant
	G |- Constant _const

// a TypedElement is always OK
axiom CheckTypedElement
	G |- TypedElement typedElement

// a ParamRef is always OK
axiom CheckParamRef
	G |- ParamRef paramref

rule CheckThis
	G |- This _this
from {
	env(G, 'this', ClassType) != null
}

rule CheckMethod derives
	G |- Method method
from {
	val typeForThis = FjTypeUtils::createClassType(
		EcoreUtil2::getContainerOfType(method, typeof(Class))
	)
	var Type bodyType
	G, 'this' <- typeForThis |- method.body.expression : bodyType
	G |- bodyType <: method.type
	G, 'this' <- typeForThis |- method.body.expression
}

rule CheckNew derives
	G |- New newExp
from {
	var fields = getAll(
		newExp.type.classref,
		FjPackage::eINSTANCE.class_Members,
		FjPackage::eINSTANCE.class_Superclass,
		typeof(Field)
	)
	// we want the superclasses' fields first
	Collections::reverse(fields)
	G |- newExp ~> newExp.args << fields
	// check all subexpressions (arguments)
	newExp.args.forEach [ G |- it ]
}

rule CheckSelection derives
	G |- Selection selection
from {
	// check receiver
	G |- selection.receiver
	// check message if it's a method call
	val message = selection.message
	switch (message) {
		Method: { 
			G |- selection ~> selection.args << message.params
			// check all subexpressions (arguments)
			for (arg : selection.args) {
				G |- arg
			}
		}
	}
}

rule CheckCast
	G |- Cast cast
from {
	var Type expType
	G |- cast.expression : expType
	
	G |- cast.type <: expType
	or
	G |- expType <: cast.type
}

// you can declare a rule of the same kind of the super system
// with different name without an override
rule CheckMethodOverridePredicate
	G ||- Method current ~~ Method previous
from {
	current.name != previous.name
	or
	{
		G |- current.type ~~ previous.type
		or
		fail error 
		"cannot change return type of inherited method: " +
			stringRep(previous.type)
		source current
		feature FjPackage::eINSTANCE.typedElement_Type
		
		current.params.size == previous.params.size
		val previousParamsIt = previous.params.iterator
		for (param : current.params) {
			G |- param.type ~~ previousParamsIt.next.type
		}
	}
}

rule CheckClass
	G |- Class cl
from {
	cl.members.forEach [ G |- it ]
	
	if (cl.superclass != null) {
		var inheritedFields = getAll(
			cl.superclass,
			FjPackage::eINSTANCE.class_Members,
			FjPackage::eINSTANCE.class_Superclass,
			typeof(Field)
		)
		// make sure no duplicate fields in the hierarchy
		inheritedFields.forEach [
			inheritedField |
			for (field : fjAux.selectFields(cl)) {
				field.name != inheritedField.name
			}
		]
		
		var inheritedMethods = getAll(
			cl.superclass,
			FjPackage::eINSTANCE.class_Members,
			FjPackage::eINSTANCE.class_Superclass,
			typeof(Method)
		)
		// check override predicate
		inheritedMethods.forEach [
			inheritedMethod |
			fjAux.selectMethods(cl).forEach [
				G ||- it ~~ inheritedMethod
			]
		]
	}
}

checkrule CheckClassOk for
	Class clazz
from {
	empty |- clazz
}

checkrule CheckMain for
	Program program
from {
	program.main == null // nothing to check
	or
	empty |- program.main
}

checkrule CheckMethodBody for
	Method method
from {
}

checkrule CheckField for
	Field field
from {
}

checkrule CheckMethodOverride for
	Method method
from {

}

checkrule CheckClassHierachyNotCyclic for
	Class cl
from {
	if (cl.superclass != null) {
		!getAll(
			cl,
			FjPackage::eINSTANCE.class_Superclass,
			FjPackage::eINSTANCE.class_Superclass,
			typeof(Class)
		).contains(cl)
		or
		fail
			error "Cyclic hierarchy for " + cl.name
			source cl
	}
}
