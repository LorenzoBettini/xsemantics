/*******************************************************************************
 * Copyright (c) 2013-2017 Lorenzo Bettini.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Lorenzo Bettini - Initial contribution and API
 *******************************************************************************/

grammar org.eclipse.xsemantics.dsl.Xsemantics with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

//generate xsemantics "http://www.eclipse.org/xsemantics/dsl/Xsemantics"
import "http://www.eclipse.org/xsemantics/dsl/Xsemantics"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

XsemanticsFile:
	importSection=XImportSection?
	xsemanticsSystem=XsemanticsSystem?
;

XsemanticsSystem:
	'system' name=QualifiedName
	('extends' superSystem=JvmParameterizedTypeReference)?
	('copyright' copyright=STRING)?
	('validatorExtends' validatorExtends=JvmParameterizedTypeReference)?
	importSection=XImportSection?
	fields += AbstractFieldDefinition*
	('auxiliary' '{'
		auxiliaryDescriptions += AuxiliaryDescription+
	'}')?
	('judgments' '{'
		judgmentDescriptions += JudgmentDescription+
	'}')?
	auxiliaryFunctions+=AuxiliaryFunction*
	rules+=Rule*
	checkrules+=CheckRule*
;

AbstractFieldDefinition:
	{Injected} 'inject' extension?='extension'? type=JvmTypeReference name=ValidID
	|
	{FieldDefinition}
	annotations+=XAnnotation*
	(writeable?='var'|'val') 
	(
		extension?='extension' type=JvmTypeReference
		|
		type=JvmTypeReference?
	) 
	name=ValidID ('=' right=XExpression)? ';'?
;

AuxiliaryDescription:
	(override?='override')?
	name=ID 
	'('
	(parameters+=FullJvmFormalParameter
		(',' parameters+=FullJvmFormalParameter)*
	)?
	')'
	(':' type=JvmTypeReference)?
	(cachedClause=CachedClauseForAuxiliary)?
	(error=ErrorSpecification)?
;

JudgmentDescription:
	(override?='override')?
	name=ID 
	judgmentSymbol=JudgmentSymbol
	judgmentParameters+=JudgmentParameter
	(relationSymbols+=RelationSymbol
	judgmentParameters+=JudgmentParameter)*
	(cachedClause=CachedClauseForJudgment)?
	(error=ErrorSpecification)?
;

CachedClauseForJudgment returns CachedClause:
	{CachedClause} 'cached' ('{'
		('entryPoints' '=' entryPointsOption=EntryPointsOption)?
		('condition' '=' condition=XExpression)?
	'}')?
;

CachedClauseForAuxiliary returns CachedClause:
	{CachedClause} 'cached' ('{'
		('condition' '=' condition=XExpression)?
	'}')?
;

enum EntryPointsOption:
	None='NONE'
;

JudgmentParameter:
	{OutputParameter} 'output' jvmTypeReference=JvmTypeReference |
	{InputParameter} parameter=FullJvmFormalParameter
;

AuxiliaryFunction:
	'auxiliary'
	name=ID 
	'('
	(parameters+=FullJvmFormalParameter
		(',' parameters+=FullJvmFormalParameter)*
	)?
	')'
	body = XExpression
;

Rule:
	Axiom | RuleWithPremises;

Axiom:
	(override?='override')? 'axiom' name=ID conclusion=RuleConclusion;

RuleWithPremises:
	(override?='override')? 'rule' name=ID
	('derives')?
	conclusion=RuleConclusion
	'from' premises=XBlockExpression
;

CheckRule:
	(override?='override')? 'checkrule' name=ID 'for'
	element=RuleParameter
	'from' premises=XBlockExpression
;

RuleConclusion:
	environment=Environment
	judgmentSymbol=JudgmentSymbol
	conclusionElements+=RuleConclusionElement
	(relationSymbols+=RelationSymbol
	conclusionElements+=RuleConclusionElement)*
	(error=ErrorSpecification)?
;

@Override
XExpressionOrVarDeclaration returns xbase::XExpression:
	PremiseExpression
;

PremiseExpression returns xbase::XExpression:
	TerminalPremiseExpression
	=>({OrExpression.branches+=current} 'or' branches+=XExpressionOrVarDeclaration)*
;

TerminalPremiseExpression returns xbase::XExpression:
	RuleInvocation |
	{Fail} 'fail' (error=ErrorSpecification)? |
	XVariableDeclaration |
	XExpression
;

RuleInvocation:
	=>(environment=EnvironmentSpecification
	judgmentSymbol=JudgmentSymbol)
	expressions+=RuleInvocationExpression
	(relationSymbols+=RelationSymbol
	expressions+=RuleInvocationExpression)*
//	(error=ErrorSpecification)? we don't need it: we can use or fail error...
;

RuleInvocationExpression returns xbase::XExpression:
	XVariableDeclaration | XExpression
;

EnvironmentSpecification returns xbase::XExpression:
	TerminalEnvironmentSpecification
	=>({EnvironmentComposition.currentEnvironment = current}
		EnvironmentComposition
		subEnvironment=EnvironmentSpecification)*
;

TerminalEnvironmentSpecification returns xbase::XExpression:
	EnvironmentMapping
;

EnvironmentMapping returns xbase::XExpression:
	TerminalEnvironmentMapping
	=>({EnvironmentMapping.key = current}
		EnvironmentMapsTo value=XExpression)?
;

TerminalEnvironmentMapping returns xbase::XExpression:
	{EmptyEnvironment} 'empty' |
	XExpression
;

Environment: name=ID;

Comma:
	','
;

EnvironmentComposition:
	Comma
;

EnvironmentMapsTo:
	'<-'
;

ErrorSpecification returns xbase::XExpression:
	{ErrorSpecification}
	'error' error=XExpression
	(
		('source' source=XExpression)?
		&
		('feature' feature=XExpression)?
		&
		('data' data=XExpression)?
	)
;

JudgmentSymbol:
	'||-' | '|-' | '||~' | '|~' | '||=' | '|=' | '||>' | '|>'
; 

RelationSymbol:
	'<!' | '!>' | '<<!' | '!>>' | '<~!' | '!~>' |
	':' | '<:' | ':>' | '<<' | '>>' | '~~' |
	'<|' | '|>' | '<-' | '-->' | '<~' | '~>' |
	'\\/' | '/\\'
;

RuleConclusionElement:
	=>(RuleParameter) | ExpressionInConclusion
;

RuleParameter:
	parameter=FullJvmFormalParameter
;

ExpressionInConclusion:
	expression=XExpression
;